{"version":3,"file":"708.js","mappings":"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","sources":["webpack://sleact-ts-front/./pages/Channel/styles.tsx","webpack://sleact-ts-front/./pages/Channel/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { Container, DragOver, Header } from './styles';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\nimport fetcher from '@utils/fetcher';\nimport ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { IChannel, IChat, IDM, IUser } from '@typings/db';\nimport makeSection from '@utils/makeSections';\nimport useSocket from '@hooks/useSocket';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport { BsFillPersonPlusFill } from 'react-icons/bs';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { backUrl } from '../../config';\nconst Channel = () => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n\n  const { data: myData } = useSWR(`${backUrl}/api/users`, fetcher);\n  const { data: channelData } = useSWR<any>(`${backUrl}/api/workspaces/${workspace}/channels`, fetcher);\n\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<any>(\n    (index) => `${backUrl}/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n\n  const { data: channelMembersData } = useSWR<any>(\n    myData ? `${backUrl}/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [onDrageOver, setOnDragOver] = useState(false);\n  const scrollbarRef = useRef<Scrollbars>(null);\n\n  const isEmpty = chatData?.[0]?.length === 0; //데이터가 더이상 없는가?\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20); //마지막 페이지인가?\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData && channelData && myData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            UserId: myData.id,\n            User: myData,\n            createdAt: new Date(),\n            ChannelId: channelData.id,\n            Channel: channelData,\n          });\n          return prevChatData;\n        }, false).then(() => {\n          localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n          setChat('');\n          if (scrollbarRef.current) {\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n            scrollbarRef.current.scrollToBottom();\n          }\n        });\n        axios\n          .post(`${backUrl}/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: savedChat,\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, workspace, channel, channelData, myData, chatData, mutateChat, setChat],\n  );\n\n  useEffect(() => {\n    localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n  }, [workspace, channel]);\n\n  const onMessage = useCallback(\n    (data: any) => {\n      if (\n        data.Channel.name === channel &&\n        (data.content.startsWith('uploads\\\\') || data.content.startsWith('uploads/') || data.UserId !== myData?.id)\n      ) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 100);\n            } else {\n              toast.success('새 메시지가 도착했습니다.', {\n                onClick() {\n                  scrollbarRef.current?.scrollToBottom();\n                },\n                closeOnClick: true,\n              });\n            }\n          }\n        });\n      }\n    },\n    [channel, myData, mutateChat],\n  );\n  useEffect(() => {\n    // on에선 이벤트 이름, callback 함수\n    socket?.on('chat', onMessage);\n    return () => {\n      socket?.off('chat', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  const chatSections = makeSection(chatData ? ([] as IDM[]).concat(...chatData).reverse() : []);\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      const formData = new FormData();\n      //browser마다 items나 files에 담김\n      if (e.dataTransfer.items) {\n        // dataTransfer.items에 담긴경우\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // dataTransfer.files에 담긴경우\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`${backUrl}/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {\n        setOnDragOver(false);\n        localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n      });\n    },\n    [workspace, channel],\n  );\n\n  const onDragOver = useCallback((e) => {\n    console.log('드래그중');\n    e.preventDefault();\n    setOnDragOver(true);\n  }, []);\n\n  if (!channelData || !myData) {\n    return null;\n  }\n\n  return (\n    <Container onDragOver={onDragOver} onDrop={onDrop}>\n      <Header>\n        <span>#{channel}</span>\n        <div style={{ display: 'flex', flex: 1, justifyContent: 'flex-end', alignItems: 'center' }}>\n          <span>{channelMembersData && channelMembersData[0].Members.length}</span>\n          <BsFillPersonPlusFill onClick={onClickInviteChannel} style={{ marginLeft: '5px' }} />\n        </div>\n      </Header>\n      <ChatList\n        chatData={chatSections}\n        scrollbarRef={scrollbarRef}\n        isReachingEnd={isReachingEnd}\n        isEmpty={isEmpty}\n        setSize={setSize}\n      />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n      <ToastContainer position=\"bottom-center\" limit={1} />\n      {onDrageOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default Channel;\n"],"names":["Container","Header","DragOver","useParams","workspace","channel","myData","useSWR","backUrl","fetcher","data","channelData","useSWRInfinite","index","chatData","mutateChat","mutate","setSize","channelMembersData","socket","useSocket","useInput","chat","onChangeChat","setChat","useState","showInviteChannelModal","setShowInviteChannelModal","onDrageOver","setOnDragOver","scrollbarRef","useRef","isEmpty","length","isReachingEnd","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","unshift","id","content","UserId","User","createdAt","Date","ChannelId","Channel","then","localStorage","setItem","getTime","toString","current","console","log","getValues","scrollToBottom","axios","catch","error","useEffect","onMessage","name","startsWith","getScrollHeight","getClientHeight","getScrollTop","setTimeout","toast","onClick","closeOnClick","on","off","chatSections","makeSection","concat","reverse","onClickInviteChannel","onCloseModal","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","append","files","onDragOver","style","display","flex","justifyContent","alignItems","Members","marginLeft","ChatList","ChatBox","InviteChannelModal","show","position","limit"],"sourceRoot":""}