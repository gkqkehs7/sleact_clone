{"version":3,"file":"94.js","mappings":"wMAEaA,GAAY,cAAH,mBAAG,CAAH,oHAQTC,GAAS,iBAAH,mBAAG,CAAH,iPAcNC,GAAW,cAAH,mBAAG,CAAH,mM,klCCNrB,IAqJA,EArJsB,WAAM,UAC1B,GAA0BC,EAAAA,EAAAA,MAAlBC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,GACLC,GAAaC,EAAAA,EAAAA,IAAO,wCAAD,OAAyCH,EAAzC,oBAA8DC,GAAMG,EAAAA,GAA7FC,KACMC,GAAWH,EAAAA,EAAAA,IAAO,kCAAmCC,EAAAA,GAA3DC,KACR,GAIIE,EAAAA,EAAAA,KACF,SAACC,GAAD,qDAAmDR,EAAnD,gBAAoEC,EAApE,kCAAgGO,EAAQ,KACxGJ,EAAAA,GALMK,EADR,EACEJ,KACQK,EAFV,EAEEC,OACAC,EAHF,EAGEA,QAMF,KAAqCC,EAAAA,EAAAA,WAAS,GAA9C,GAAOC,EAAP,KAAoBC,EAApB,KACA,KAAsCC,EAAAA,EAAAA,GAAS,IAA/C,GAAOC,EAAP,KAAaC,EAAb,KAA2BC,EAA3B,KACMC,GAAeC,EAAAA,EAAAA,QAAmB,MAGlCC,EAAoC,KAA1Bb,MAAAA,GAAA,UAAAA,EAAW,UAAX,eAAec,QACzBC,EAAgBF,GAAYb,IAAY,UAAAA,EAASA,EAASc,OAAS,UAA3B,eAA+BA,QAAS,GAEhFE,GAAeC,EAAAA,EAAAA,cACnB,SAACC,GACCA,EAAEC,iBAEEX,MAAAA,GAAAA,EAAMY,QACRC,IAAAA,KAAA,+CACgD9B,EADhD,gBACiEC,EADjE,UAC6E,CACzE8B,QAASd,IAEVe,MAAK,WACJtB,IACAS,EAAQ,IACRc,aAAaC,QAAb,UAAwBlC,EAAxB,YAAqCC,IAAM,IAAIkC,MAAOC,UAAUC,YAChEC,YAAW,WAAM,MACf,UAAAlB,EAAamB,eAAb,SAAsBC,mBACrB,QAEJC,MAAMC,QAAQC,SAGrB,CAAC1B,IAGHyB,QAAQE,IAAInC,IAEZoC,EAAAA,EAAAA,YAAU,WACRZ,aAAaC,QAAb,UAAwBlC,EAAxB,YAAqCC,IAAM,IAAIkC,MAAOC,UAAUC,cAC/D,CAACrC,EAAWC,IACf,IAAO6C,EAAP,GAAiBC,EAAAA,EAAAA,GAAU/C,GAA3B,MAKMgD,GAAYtB,EAAAA,EAAAA,cAChB,SAACrB,GACCK,GAAW,SAACD,GAGV,OAFAA,MAAAA,GAAAA,EAAW,GAAGwC,KAAK5C,GACnB4B,aAAaC,QAAb,UAAwBlC,EAAxB,YAAqCC,IAAM,IAAIkC,MAAOC,UAAUC,YACzD5B,KACN,GAAOuB,MAAK,WACbkB,EAAAA,GAAAA,QAAc,iBAAkB,CAC9BC,QAD8B,WACpB,MACR,UAAA/B,EAAamB,eAAb,SAAsBC,kBAExBY,cAAc,SAIpB,CAACnD,EAAIK,EAAQI,KAGfmC,EAAAA,EAAAA,YAAU,WAGR,OADAC,MAAAA,GAAAA,EAAQO,GAAG,KAAML,GACV,WACLF,MAAAA,GAAAA,EAAQQ,IAAI,KAAMN,MAEnB,CAACF,EAAQE,KAEZH,EAAAA,EAAAA,YAAU,WACoB,MAAH,KAArBpC,MAAAA,OAAA,EAAAA,EAAUc,UACZ,UAAAH,EAAamB,eAAb,SAAsBC,oBAEvB,CAAC/B,IAMJ,I,EAAM8C,GAAeC,EAAAA,EAAAA,GAAY/C,GAAY,MAAagD,OAAd,S,EAAwBhD,E,wVAAUiD,UAAY,IAEpFC,GAASjC,EAAAA,EAAAA,cACb,SAACC,GACCA,EAAEC,iBAEF,IAAMgC,EAAW,IAAIC,SAErB,GAAIlC,EAAEmC,aAAaC,OAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAIrC,EAAEmC,aAAaC,MAAMxC,OAAQyC,IAC/C,GAAqC,SAAjCrC,EAAEmC,aAAaC,MAAMC,GAAGC,KAAiB,CAC3C,IAAMC,EAAOvC,EAAEmC,aAAaC,MAAMC,GAAGG,YACrCP,EAASQ,OAAO,QAASF,SAK7B,IAAK,IAAIF,EAAI,EAAGA,EAAIrC,EAAEmC,aAAaO,MAAM9C,OAAQyC,IAC/CJ,EAASQ,OAAO,QAASzC,EAAEmC,aAAaO,MAAML,IAGlDlC,IAAAA,KAAA,+CAAmD9B,EAAnD,gBAAoEC,EAApE,WAAiF2D,GAAU5B,MAAK,WAC9FjB,GAAc,GACdkB,aAAaC,QAAb,UAAwBlC,EAAxB,YAAqCC,IAAM,IAAIkC,MAAOC,UAAUC,iBAGpE,CAACrC,EAAWC,IAGRqE,GAAa5C,EAAAA,EAAAA,cAAY,SAACC,GAC9Be,QAAQE,IAAI,QACZjB,EAAEC,iBACFb,GAAc,KACb,IAEH,OAAKb,GAAaI,EAIhB,gBAACV,EAAD,CAAW0E,WAAYA,EAAYX,OAAQA,GACzC,gBAAC9D,EAAD,KACE,uBAAK0E,IAAKC,IAAAA,IAAatE,EAASuE,MAAO,CAAEC,EAAG,OAAQC,EAAG,UAAYC,IAAK1E,EAAS2E,WACjF,4BAAO3E,EAAS2E,WAElB,gBAACC,EAAA,EAAD,CACErE,SAAU8C,EACVnC,aAAcA,EACdI,cAAeA,EACfF,QAASA,EACTV,QAASA,IAEX,gBAAC,KAAD,CAAgBmE,SAAS,gBAAgBC,MAAO,IAChD,gBAACC,EAAA,EAAD,CAAShE,KAAMA,EAAMC,aAAcA,EAAcO,aAAcA,IAC9DX,GAAe,gBAAChB,EAAD,cAjBX","sources":["webpack://sleact-ts-front/./pages/DirectMessage/styles.tsx","webpack://sleact-ts-front/./pages/DirectMessage/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { Container, DragOver, Header } from './styles';\nimport gravatar from 'gravatar';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\nimport fetcher from '@utils/fetcher';\nimport ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { IDM } from '@typings/db';\nimport makeSection from '@utils/makeSections';\nimport useSocket from '@hooks/useSocket';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst DirectMessage = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const { data: userData } = useSWR(`http://localhost:3095/api/workspaces/${workspace}/members/${id}`, fetcher);\n  const { data: myData } = useSWR(`http://localhost:3095/api/users`, fetcher);\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<IDM[]>(\n    (index) => `http://localhost:3095/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n\n  const [onDrageOver, setOnDragOver] = useState(false);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const scrollbarRef = useRef<Scrollbars>(null);\n\n  //이제 데이터가 이차원 배열로 들어옴 [[3page] ,[2page], [1page]] 나중에 들어온게 앞으로 저장됨 그래서 [0].length===0 인지 확인하는거임\n  const isEmpty = chatData?.[0]?.length === 0; //데이터가 더이상 없는가?\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20); //마지막 페이지인가?\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      if (chat?.trim()) {\n        axios\n          .post(`http://localhost:3095/api/workspaces/${workspace}/dms/${id}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            mutateChat();\n            setChat('');\n            localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n            setTimeout(() => {\n              scrollbarRef.current?.scrollToBottom();\n            }, 100);\n          })\n          .catch(console.error);\n      }\n    },\n    [chat],\n  );\n\n  console.log(chatData);\n\n  useEffect(() => {\n    localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n  }, [workspace, id]);\n  const [socket] = useSocket(workspace);\n\n  //mutate(새로운값, false)\n  //false하면 서버에 검사안함 true로 하면 기존 revalidate와 same\n  //socket으로 데이터 가져왓으므로 mutate를 false로해서 두번 검사가 이루어지지 않기로 한다\n  const onMessage = useCallback(\n    (data: any) => {\n      mutateChat((chatData) => {\n        chatData?.[0].push(data);\n        localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n        return chatData; //원래 값이 들어가야하는데 함수 들어갔으니 return 해주어야겟지?\n      }, false).then(() => {\n        toast.success('새 메시지가 도착했습니다.', {\n          onClick() {\n            scrollbarRef.current?.scrollToBottom();\n          },\n          closeOnClick: true,\n        });\n      });\n    },\n    [id, myData, mutateChat],\n  );\n\n  useEffect(() => {\n    // on에선 이벤트 이름, callback 함수\n    socket?.on('dm', onMessage);\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  // 지금데이터가 [ [제일최근꺼~최근꺼] [오래된거~제일오래된거] ] 이런 순으로 되어있다.\n  // 제일최근꺼가 밑에보이려면 배열을 reverse시켜서 위에서는 최근꺼 ~ 아래서 제일 최근꺼 순으로 보여주어야한다\n  //reverse()하면 기존의 chat이 변경되기 때문에 기존의 chatData불변성 지키기\n\n  const chatSections = makeSection(chatData ? ([] as IDM[]).concat(...chatData).reverse() : []);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      const formData = new FormData();\n      //browser마다 items나 files에 담김\n      if (e.dataTransfer.items) {\n        // dataTransfer.items에 담긴경우\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // dataTransfer.files에 담긴경우\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`http://localhost:3095/api/workspaces/${workspace}/dms/${id}/images`, formData).then(() => {\n        setOnDragOver(false);\n        localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n      });\n    },\n    [workspace, id],\n  );\n\n  const onDragOver = useCallback((e) => {\n    console.log('드래그중');\n    e.preventDefault();\n    setOnDragOver(true);\n  }, []);\n\n  if (!userData || !myData) {\n    return null;\n  }\n  return (\n    <Container onDragOver={onDragOver} onDrop={onDrop}>\n      <Header>\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList\n        chatData={chatSections}\n        scrollbarRef={scrollbarRef}\n        isReachingEnd={isReachingEnd}\n        isEmpty={isEmpty}\n        setSize={setSize}\n      />\n      <ToastContainer position=\"bottom-center\" limit={1} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      {onDrageOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n"],"names":["Container","Header","DragOver","useParams","workspace","id","userData","useSWR","fetcher","data","myData","useSWRInfinite","index","chatData","mutateChat","mutate","setSize","useState","onDrageOver","setOnDragOver","useInput","chat","onChangeChat","setChat","scrollbarRef","useRef","isEmpty","length","isReachingEnd","onSubmitForm","useCallback","e","preventDefault","trim","axios","content","then","localStorage","setItem","Date","getTime","toString","setTimeout","current","scrollToBottom","catch","console","error","log","useEffect","socket","useSocket","onMessage","push","toast","onClick","closeOnClick","on","off","chatSections","makeSection","concat","reverse","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","append","files","onDragOver","src","gravatar","email","s","d","alt","nickname","ChatList","position","limit","ChatBox"],"sourceRoot":""}