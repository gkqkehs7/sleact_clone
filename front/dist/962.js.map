{"version":3,"file":"962.js","mappings":"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","sources":["webpack://sleact-ts-front/./components/InviteChannelModal/index.tsx","webpack://sleact-ts-front/./components/Modal/styles.tsx","webpack://sleact-ts-front/./components/Modal/index.tsx","webpack://sleact-ts-front/./hooks/useSocket.ts","webpack://sleact-ts-front/./layouts/Workspace/styles.tsx","webpack://sleact-ts-front/./components/Menu/styles.tsx","webpack://sleact-ts-front/./components/Menu/index.tsx","webpack://sleact-ts-front/./components/CreateChannelModal/index.tsx","webpack://sleact-ts-front/./components/InviteWorkspaceModal/index.tsx","webpack://sleact-ts-front/./components/DMList/styles.tsx","webpack://sleact-ts-front/./components/EachChannel/index.tsx","webpack://sleact-ts-front/./components/ChannelList/index.tsx","webpack://sleact-ts-front/./components/EachDM/index.tsx","webpack://sleact-ts-front/./components/DMList/index.tsx","webpack://sleact-ts-front/./layouts/Workspace/index.tsx"],"sourcesContent":["import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteChannelModal: (flag: boolean) => void;\n}\nconst InviteChannelModal: FC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('http://localhost:3095/api/users', fetcher);\n  // const { mutate: revalidateMembers } = useSWR<IUser[]>(\n  //   userData ? `http://localhost:3095/api/workspaces/${workspace}/channels/${channel}/members` : null,\n  //   fetcher,\n  // );\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`http://localhost:3095/api/workspaces/${workspace}/channels/${channel}/members`, {\n          email: newMember,\n        })\n        .then(() => {\n          // revalidateMembers();\n          setShowInviteChannelModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [channel, newMember, setNewMember, setShowInviteChannelModal, workspace],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>채널 멤버 초대</span>\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteChannelModal;\n","import styled from '@emotion/styled';\n\nexport const CreateModal = styled.div`\n  position: fixed;\n  text-align: center;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  z-index: 1022;\n  & > div {\n    margin-top: 200px;\n    display: inline-block;\n    width: 440px;\n    background: white;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    max-width: 440px;\n    padding: 30px 40px 0;\n    z-index: 1012;\n    position: relative;\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { CreateModal, CloseModalButton } from '@components/Modal/styles';\nimport React, { FC, PropsWithChildren, useCallback } from 'react';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n}\n\nconst Modal: FC<PropsWithChildren<Props>> = ({ show, children, onCloseModal }) => {\n  const stopPropagation = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n  return (\n    <CreateModal onClick={onCloseModal}>\n      <div onClick={stopPropagation}>\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\n        {children}\n      </div>\n    </CreateModal>\n  );\n};\n\nexport default Modal;\n","import { useCallback } from 'react';\nimport io from 'socket.io-client';\n\nconst backUrl = 'http://localhost:3095';\n\nconst sockets: { [key: string]: any } = {};\n\nconst useSocket = (workspace?: string) => {\n  const disconnect = useCallback(() => {\n    if (workspace && sockets[workspace]) {\n      sockets[workspace].on('disconnect', () => {\n        delete sockets[workspace];\n      });\n    }\n  }, [workspace]);\n\n  if (!workspace) {\n    //workspace가 존재하지 않을때\n    return [undefined, disconnect];\n  }\n\n  if (!sockets[workspace]) {\n    sockets[workspace] = io(`${backUrl}/ws-${workspace}`);\n    sockets[workspace].on('connect', (socket: any) => {\n      console.log(socket);\n    });\n  }\n\n  return [sockets[workspace], disconnect];\n};\n\nexport default useSocket;\n","import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const RightMenu = styled.div`\n  float: right;\n`;\n\nexport const Header = styled.header`\n  height: 38px;\n  background: #350d36;\n  color: #ffffff;\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\n  padding: 5px;\n  text-align: center;\n`;\n\nexport const ProfileImg = styled.img`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  top: 5px;\n  right: 16px;\n`;\n\nexport const ProfileModal = styled.div`\n  display: flex;\n  padding: 20px;\n  & img {\n    display: flex;\n  }\n  & > div {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n  & #profile-name {\n    font-weight: bold;\n    display: inline-flex;\n  }\n  & #profile-active {\n    font-size: 13px;\n    display: inline-flex;\n  }\n`;\n\nexport const LogOutButton = styled.button`\n  border: none;\n  width: 100%;\n  border-top: 1px solid rgb(29, 28, 29);\n  background: transparent;\n  display: block;\n  height: 33px;\n  padding: 5px 20px 5px;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceWrapper = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Workspaces = styled.div`\n  width: 65px;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  background: #3f0e40;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-right: 1px solid rgb(82, 38, 83);\n  vertical-align: top;\n  text-align: center;\n  padding: 15px 0 0;\n`;\n\nexport const Channels = styled.nav`\n  width: 260px;\n  display: inline-flex;\n  flex-direction: column;\n  background: #3f0e40;\n  color: rgb(188, 171, 188);\n  vertical-align: top;\n  & a {\n    padding-left: 36px;\n    color: inherit;\n    text-decoration: none;\n    height: 28px;\n    line-height: 28px;\n    display: flex;\n    align-items: center;\n    &.selected {\n      color: white;\n    }\n  }\n  & .bold {\n    color: white;\n    font-weight: bold;\n  }\n  & .count {\n    margin-left: auto;\n    background: #cd2553;\n    border-radius: 16px;\n    display: inline-block;\n    font-size: 12px;\n    font-weight: 700;\n    height: 18px;\n    line-height: 18px;\n    padding: 0 9px;\n    color: white;\n    margin-right: 16px;\n  }\n  & h2 {\n    height: 36px;\n    line-height: 36px;\n    margin: 0;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 15px;\n  }\n`;\n\nexport const WorkspaceName = styled.button`\n  height: 64px;\n  line-height: 64px;\n  border: none;\n  width: 100%;\n  text-align: left;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-bottom: 1px solid rgb(82, 38, 83);\n  font-weight: 900;\n  font-size: 24px;\n  background: transparent;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding: 0;\n  padding-left: 16px;\n  margin: 0;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const MenuScroll = styled.div`\n  height: calc(100vh - 102px);\n  overflow-y: auto;\n`;\n\nexport const WorkspaceModal = styled.div`\n  padding: 10px 0 0;\n  & h2 {\n    padding-left: 20px;\n  }\n  & > button {\n    width: 100%;\n    height: 28px;\n    padding: 4px;\n    border: none;\n    background: transparent;\n    border-top: 1px solid rgb(28, 29, 28);\n    cursor: pointer;\n    &:last-of-type {\n      border-bottom: 1px solid rgb(28, 29, 28);\n    }\n  }\n`;\n\nexport const Chats = styled.div`\n  flex: 1;\n`;\n\nexport const AddButton = styled.button`\n  color: white;\n  font-size: 24px;\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceButton = styled.button`\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  border-radius: 10px;\n  background: white;\n  border: 3px solid #3f0e40;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 700;\n  color: black;\n  cursor: pointer;\n`;\n","import styled from '@emotion/styled';\n\nexport const CreateMenu = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 1000;\n  & > div {\n    position: absolute;\n    display: inline-block;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    min-width: 360px;\n    z-index: 512;\n    max-height: calc(100vh - 20px);\n    color: rgb(29, 28, 29);\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import React, { CSSProperties, FC, useCallback } from 'react';\nimport { CloseModalButton, CreateMenu } from './styles';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: (e: any) => void;\n  style: CSSProperties;\n  closeButton?: boolean;\n}\n\n// <Props>써주면 Menu에 Props연결\nconst Menu: FC<Props> = ({ children, style, show, onCloseModal, closeButton }) => {\n  const stopPropagation = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) return null;\n  return (\n    <CreateMenu onClick={onCloseModal}>\n      <div style={style} onClick={stopPropagation}>\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\n        {children}\n      </div>\n    </CreateMenu>\n  );\n};\n\nMenu.defaultProps = {\n  closeButton: true,\n};\n\nexport default Menu;\n","import React, { useCallback, VFC } from 'react';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport Modal from '@components/Modal';\nimport axios from 'axios';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowCreateChannelModal: (flag: boolean) => void;\n}\nconst CreateChannelModal: VFC<Props> = ({ show, onCloseModal, setShowCreateChannelModal }) => {\n  const [newChannel, onChangeNewChannel, setNewChannel] = useInput('');\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n\n  const { data: userData, error } = useSWR<IUser | false>('http://localhost:3095/api/users', fetcher, {\n    dedupingInterval: 2000,\n  });\n\n  const { data: channelData, mutate } = useSWR<IChannel[]>(\n    userData ? `http://localhost:3095/api/workspaces/${workspace}/channels` : null,\n    fetcher,\n  );\n\n  const onCreateChannel = useCallback(\n    (e) => {\n      e.preventDefault();\n      axios\n        .post(\n          `http://localhost:3095/api/workspaces/${workspace}/channels`,\n          {\n            name: newChannel,\n          },\n          {\n            withCredentials: true,\n          },\n        )\n        .then((res) => {\n          console.log(res.data);\n          mutate();\n          setShowCreateChannelModal(false);\n          setNewChannel('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newChannel],\n  );\n\n  if (!show) return null;\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onCreateChannel}>\n        <Label id=\"channel-label\">\n          <span>채널</span>\n          <Input id=\"channel\" value={newChannel} onChange={onChangeNewChannel} />\n        </Label>\n        <Button type=\"submit\">생성하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default CreateChannelModal;\n","import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteWorkspaceModal: (flag: boolean) => void;\n}\nconst InviteWorkspaceModal: FC<Props> = ({ show, onCloseModal, setShowInviteWorkspaceModal }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('http://localhost:3095/api/users', fetcher);\n  const { mutate: revalidateMember } = useSWR<IUser[]>(\n    userData ? `http://localhost:3095/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`http://localhost:3095/api/workspaces/${workspace}/members`, {\n          email: newMember,\n        })\n        .then(() => {\n          revalidateMember();\n          setShowInviteWorkspaceModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newMember, workspace, revalidateMember, setShowInviteWorkspaceModal, setNewMember],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>이메일</span>\n          <Input id=\"member\" type=\"email\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteWorkspaceModal;\n","import styled from '@emotion/styled';\n\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\n  background: transparent;\n  border: none;\n  width: 26px;\n  height: 26px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  margin-left: 10px;\n  cursor: pointer;\n  ${({ collapse }) =>\n    collapse &&\n    `\n    & i {\n      transform: none;\n    }\n  `};\n`;\n","import { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { useEffect, VFC } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport useSWR from 'swr';\n\ninterface Props {\n  channel: IChannel;\n}\nconst EachChannel: VFC<Props> = ({ channel }) => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const location = useLocation();\n  const { data: userData } = useSWR<IUser>('http://localhost:3095/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const date = localStorage.getItem(`${workspace}-${channel.name}`) || 0;\n  const { data: count, mutate } = useSWR<number>(\n    userData\n      ? `http://localhost:3095/api/workspaces/${workspace}/channels/${channel.name}/unreads?after=${date}`\n      : null,\n    fetcher,\n  );\n\n  useEffect(() => {\n    if (location.pathname === `/workspace/${workspace}/channel/${channel.name}`) {\n      mutate(0);\n    }\n  }, [mutate, location.pathname, workspace, channel]);\n\n  return (\n    <NavLink key={channel.name} activeClassName=\"selected\" to={`/workspace/${workspace}/channel/${channel.name}`}>\n      <span className={count !== undefined && count > 0 ? 'bold' : undefined}># {channel.name}</span>\n      {count !== undefined && count > 0 && <span className=\"count\">{count}</span>}\n    </NavLink>\n  );\n};\n\nexport default EachChannel;\n","import { CollapseButton } from '@components/DMList/styles';\nimport EachChannel from '@components/EachChannel';\nimport { IChannel, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { FC, useCallback, useState } from 'react';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport { MdKeyboardArrowDown, MdKeyboardArrowRight } from 'react-icons/md';\n\ninterface Props {\n  channelData?: IChannel[];\n  userData?: IUser;\n}\n\nconst ChannelList: FC<Props> = () => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const { data: userData } = useSWR<IUser>('http://localhost:3095/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: channelData } = useSWR<IChannel[]>(\n    userData ? `http://localhost:3095/api/workspaces/${workspace}/channels` : null,\n    fetcher,\n  );\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          {channelCollapse ? <MdKeyboardArrowRight /> : <MdKeyboardArrowDown />}\n        </CollapseButton>\n        <span>Channels</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          channelData?.map((channel) => {\n            return <EachChannel key={channel.id} channel={channel} />;\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default ChannelList;\n","import { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { useEffect, VFC } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport useSWR from 'swr';\nimport styled from '@emotion/styled';\n\ninterface Props {\n  member: IUser;\n  isOnline: boolean;\n}\nconst EachDM: VFC<Props> = ({ member, isOnline }) => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const location = useLocation();\n  const { data: userData } = useSWR<IUser>('http://localhost:3095/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const date = localStorage.getItem(`${workspace}-${member.id}`) || 0;\n  const { data: count, mutate: countMutate } = useSWR<number>(\n    userData ? `http://localhost:3095/api/workspaces/${workspace}/dms/${member.id}/unreads?after=${date}` : null,\n    fetcher,\n  );\n\n  useEffect(() => {\n    if (location.pathname === `/workspace/${workspace}/dm/${member.id}`) {\n      countMutate(0);\n    }\n  }, [countMutate, location.pathname, workspace, member]);\n\n  return (\n    // Link의 activeClassName은 지금 주소와 누를 주소가 같을때 발동\n    <NavLink key={member.id} activeClassName=\"selected\" to={`/workspace/${workspace}/dm/${member.id}`}>\n      {isOnline ? <Online /> : <Offline />}\n      <span className={count && count > 0 ? 'bold' : undefined}>{member.nickname}</span>\n      {member.id === userData?.id && <span> (나)</span>}\n      {(count && count > 0 && <span className=\"count\">{count}</span>) || null}\n    </NavLink>\n  );\n};\n\nconst Online = styled.div`\n  width: 10px;\n  height: 10px;\n  border: solid;\n  border-width: 1px;\n  border-radius: 10px;\n  margin-right: 2px;\n  background-color: green;\n`;\n\nconst Offline = styled.div`\n  width: 10px;\n  height: 10px;\n  border: solid;\n  border-width: 1px;\n  border-radius: 10px;\n  margin-right: 2px;\n`;\n\nexport default EachDM;\n","import EachDM from '@components/EachDM';\n// import useSocket from '@hooks/useSocket';\nimport { CollapseButton } from '@components/DMList/styles';\nimport { IDM, IUser, IUserWithOnline } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport useSWR from 'swr';\nimport { MdKeyboardArrowDown, MdKeyboardArrowRight } from 'react-icons/md';\nimport useSocket from '@hooks/useSocket';\n\nconst DMList = () => {\n  const { workspace } = useParams<{ workspace?: string }>();\n  const { data: userData } = useSWR<IUser>('http://localhost:3095/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\n    userData ? `http://localhost:3095/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const [onlineList, setOnlineList] = useState<number[]>([]);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  useEffect(() => {\n    console.log('DMList: workspace 바꼈다', workspace);\n    setOnlineList([]);\n  }, [workspace]);\n\n  useEffect(() => {\n    socket?.on('onlineList', (data: number[]) => {\n      setOnlineList(data);\n    });\n    // socket이 변경될 때마다 실행되는데 기존 socket이 계속 연결되어있으면 안 되니까\n    return () => {\n      socket?.off('onlineList');\n    };\n  }, [socket]);\n\n  return (\n    <>\n      <h2>\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\n          {channelCollapse ? <MdKeyboardArrowRight /> : <MdKeyboardArrowDown />}\n        </CollapseButton>\n        <span>Direct Messages</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          memberData?.map((member) => {\n            const isOnline = onlineList.includes(member.id);\n            return <EachDM key={member.id} member={member} isOnline={isOnline} />;\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default DMList;\n","import fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { VFC, useCallback, useState, useEffect } from 'react';\nimport { Switch, Route, Redirect, Link, useParams } from 'react-router-dom';\nimport useSWR from 'swr';\nimport gravatar from 'gravatar';\nimport {\n  AddButton,\n  Channels,\n  Chats,\n  Header,\n  LogOutButton,\n  MenuScroll,\n  ProfileImg,\n  ProfileModal,\n  RightMenu,\n  WorkspaceButton,\n  WorkspaceModal,\n  WorkspaceName,\n  Workspaces,\n  WorkspaceWrapper,\n} from './styles';\nimport loadable from '@loadable/component';\nimport Menu from '@components/Menu';\nimport { IChannel, IUser } from '@typings/db';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport useInput from '@hooks/useInput';\nimport Modal from '@components/Modal';\nimport { toast } from 'react-toastify';\nimport CreateChannelModal from '@components/CreateChannelModal';\nimport InviteWorkspaceModal from '@components/InviteWorkspaceModal';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport ChannelList from '@components/ChannelList';\nimport DMList from '@components/DMList';\nimport useSocket from '@hooks/useSocket';\n\nconst DirectMessage = loadable(() => import('@pages/DirectMessage'));\nconst Channel = loadable(() => import('@pages/Channel'));\n\n//children필요없는 component는 VFC 필요하면 FC\nconst Workspace: VFC = () => {\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\n  const [showWorkspaceModal, setShowWorkspaceModal] = useState(false);\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] = useState(false);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkspace] = useInput('');\n  const [newUrl, onChangeNewUrl, setNewUrl] = useInput('');\n\n  const { workspace } = useParams<{ workspace: string }>();\n  const [socket, disconnect] = useSocket(workspace);\n\n  const {\n    data: userData,\n    error,\n    mutate,\n  } = useSWR<IUser | false>('http://localhost:3095/api/users', fetcher, {\n    dedupingInterval: 2000,\n  });\n\n  const { data: channelData } = useSWR<IChannel[]>(\n    userData ? `http://localhost:3095/api/workspaces/${workspace}/channels` : null,\n    fetcher,\n  );\n\n  useEffect(() => {\n    if (channelData && userData && socket) {\n      socket.emit('login', { id: userData.id, channelId: channelData.map((channel) => channel.id) });\n    }\n  }, [socket, channelData, userData]);\n\n  useEffect(() => {\n    //새로고침이나 workspace바뀔때마다 disconnect\n    return () => {\n      disconnect();\n    };\n  }, [workspace, disconnect]);\n\n  const onLogOut = useCallback(() => {\n    axios\n      .post('http://localhost:3095/api/users/logout', null, {\n        withCredentials: true,\n      })\n      .then(() => {\n        mutate();\n      });\n  }, []);\n\n  const onClickUserProfile = useCallback((e) => {\n    e.stopPropagation();\n    setShowUserMenu((prev) => !prev);\n  }, []);\n\n  const onCreateWorkspace = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newWorkspace || !newWorkspace.trim()) return;\n      if (!newUrl || !newUrl.trim()) return;\n      console.log('클릭');\n      axios\n        .post('http://localhost:3095/api/workspaces', {\n          workspace: newWorkspace,\n          url: newUrl,\n        })\n        .then(() => {\n          mutate();\n          setShowCreateWorkspaceModal(false);\n          setNewWorkspace('');\n          setNewUrl('');\n        })\n        .catch((err) => {\n          console.log(err);\n          toast.error(err.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newWorkspace, newUrl],\n  );\n\n  const onClickCreateWorkspace = useCallback(() => {\n    setShowCreateWorkspaceModal(true);\n  }, []);\n\n  const onClickAddChannel = useCallback(() => {\n    setShowCreateChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowCreateWorkspaceModal(false);\n    setShowCreateChannelModal(false);\n    setShowInviteWorkspaceModal(false);\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const toggleWorkspaceModal = useCallback(() => {\n    setShowWorkspaceModal((prev) => !prev);\n  }, [showWorkspaceModal]);\n\n  const onClickInviteWorkspace = useCallback(() => {\n    setShowInviteWorkspaceModal(!showInviteWorkspaceModal);\n  }, [showInviteWorkspaceModal]);\n\n  if (!userData) {\n    return <Redirect to=\"/login\" />;\n  }\n  return (\n    <div>\n      <Header>\n        <RightMenu>\n          <span onClick={onClickUserProfile}>\n            <ProfileImg src={gravatar.url(userData.email, { s: '28px', d: 'retro' })} alt={userData.nickname} />\n            {showUserMenu && (\n              <Menu style={{ right: 0, top: 38 }} show={showUserMenu} onCloseModal={onClickUserProfile}>\n                <ProfileModal>\n                  <img src={gravatar.url(userData.email, { s: '36px', d: 'retro' })} alt={userData.nickname} />\n                  <div>\n                    <span id=\"profile-name\">{userData.nickname}</span>\n                    <span id=\"profile-active\">Active</span>\n                  </div>\n                </ProfileModal>\n                <LogOutButton onClick={onLogOut}>로그아웃</LogOutButton>\n              </Menu>\n            )}\n          </span>\n        </RightMenu>\n      </Header>\n      <WorkspaceWrapper>\n        <Workspaces>\n          {userData.Workspaces.map((ws) => {\n            return (\n              <Link key={ws.id} to={`/workspace/${ws.url}/channel/일반`}>\n                <WorkspaceButton>{ws.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\n              </Link>\n            );\n          })}\n          <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\n        </Workspaces>\n        <Channels>\n          <WorkspaceName onClick={toggleWorkspaceModal}>{workspace}</WorkspaceName>\n          <MenuScroll>\n            <Menu show={showWorkspaceModal} onCloseModal={toggleWorkspaceModal} style={{ top: 95, left: 80 }}>\n              <WorkspaceModal>\n                <h2>{userData?.Workspaces.find((v) => v.url === workspace)?.name}</h2>\n                <button onClick={onClickInviteWorkspace}>워크스페이스에 사용자 초대</button>\n                <button onClick={onClickAddChannel}>채널 만들기</button>\n                <button onClick={onLogOut}>로그아웃</button>\n              </WorkspaceModal>\n            </Menu>\n            <ChannelList />\n            <DMList />\n          </MenuScroll>\n        </Channels>\n        <Chats>\n          <Switch>\n            <Route path=\"/workspace/:workspace/channel/:channel\" component={Channel} />\n            <Route path=\"/workspace/:workspace/dm/:id\" component={DirectMessage} />\n          </Switch>\n        </Chats>\n      </WorkspaceWrapper>\n      <Modal show={showCreateWorkspaceModal} onCloseModal={onCloseModal}>\n        <form onSubmit={onCreateWorkspace}>\n          <Label id=\"workspace-label\">\n            <span>워크스페이스 이름</span>\n            <Input id=\"workspace\" value={newWorkspace} onChange={onChangeNewWorkspace} />\n          </Label>\n          <Label id=\"workspace-url-label\">\n            <span>워크스페이스 url</span>\n            <Input id=\"workspace-url\" value={newUrl} onChange={onChangeNewUrl} />\n          </Label>\n          <Button type=\"submit\">생성하기</Button>\n        </form>\n      </Modal>\n      <CreateChannelModal\n        show={showCreateChannelModal}\n        onCloseModal={onCloseModal}\n        setShowCreateChannelModal={setShowCreateChannelModal}\n      />\n      <InviteWorkspaceModal\n        show={showInviteWorkspaceModal}\n        onCloseModal={onCloseModal}\n        setShowInviteWorkspaceModal={setShowInviteWorkspaceModal}\n      />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n    </div>\n  );\n};\n\nexport default Workspace;\n"],"names":["show","onCloseModal","setShowInviteChannelModal","useParams","workspace","channel","useInput","newMember","onChangeNewMember","setNewMember","onInviteMember","useSWR","fetcher","data","useCallback","e","preventDefault","trim","axios","email","then","catch","error","console","dir","toast","response","position","onSubmit","id","value","onChange","type","CreateModal","CloseModalButton","children","stopPropagation","onClick","sockets","disconnect","on","io","socket","log","undefined","RightMenu","Header","ProfileImg","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","Channels","WorkspaceName","MenuScroll","WorkspaceModal","Chats","AddButton","WorkspaceButton","CreateMenu","Menu","style","closeButton","defaultProps","setShowCreateChannelModal","newChannel","onChangeNewChannel","setNewChannel","dedupingInterval","userData","mutate","onCreateChannel","name","withCredentials","res","Modal","setShowInviteWorkspaceModal","revalidateMember","CollapseButton","collapse","location","useLocation","date","localStorage","getItem","count","useEffect","pathname","key","activeClassName","to","className","useState","channelCollapse","setChannelCollapse","channelData","toggleChannelCollapse","prev","map","Online","Offline","member","isOnline","countMutate","nickname","memberData","useSocket","onlineList","setOnlineList","off","includes","DirectMessage","loadable","Channel","showUserMenu","setShowUserMenu","showCreateWorkspaceModal","setShowCreateWorkspaceModal","showWorkspaceModal","setShowWorkspaceModal","showCreateChannelModal","showInviteWorkspaceModal","showInviteChannelModal","newWorkspace","onChangeNewWorkspace","setNewWorkspace","newUrl","onChangeNewUrl","setNewUrl","emit","channelId","onLogOut","onClickUserProfile","onCreateWorkspace","url","err","onClickCreateWorkspace","onClickAddChannel","toggleWorkspaceModal","onClickInviteWorkspace","src","gravatar","s","d","alt","right","top","ws","slice","toUpperCase","left","find","v","path","component","InviteChannelModal"],"sourceRoot":""}