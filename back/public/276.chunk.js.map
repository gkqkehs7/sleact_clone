{"version":3,"file":"276.chunk.js","mappings":"6LAGaA,GAAW,cAAH,mBAAG,CAAH,6EAORC,GAAO,eAAH,mBAAG,CAAH,6HAQJC,GAAmB,OAAOC,EAAAA,EAAP,qBAAH,yaA4BhBC,GAAU,cAAH,mBAAG,CAAH,4NAWPC,GAAa,iBAAH,mBAAG,CAAH,8DAMVC,GAAc,iBAAH,mBAAG,CAAH,iJAWpB,qBAAGC,OACE,sDAZe,K,uECgCxB,EA9E4B,SAAC,GAAsD,IAApDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAEvDC,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAA0CE,EAAAA,EAAAA,IAAM,UAAmBC,EAAAA,EAAnB,cAAwCC,EAAAA,GAA1EC,EAAd,EAAQC,KACMC,GADd,EAAwBC,MAAxB,EAA+BC,QACFP,EAAAA,EAAAA,IAC3BG,EAAW,GAAH,OAAMF,EAAAA,EAAN,2BAAgCH,EAAhC,YAAsD,KAC9DI,EAAAA,GAFME,MAKFI,GAAcC,EAAAA,EAAAA,QAA4B,OAChDC,EAAAA,EAAAA,YAAU,WACJF,EAAYG,UACdC,EAAAA,EAAAA,GAASJ,EAAYG,WAEtB,IAEH,IAAME,GAAgBC,EAAAA,EAAAA,cACpB,SAACC,GACe,UAAVA,EAAEC,MACJD,EAAEE,iBACGF,EAAEG,WACLH,EAAEE,iBACFtB,EAAaoB,OAInB,CAACpB,IAGGwB,GAAmBL,EAAAA,EAAAA,cACvB,SACEM,EACAC,EACAC,EACAC,EACA9B,GAEA,GAAKY,EACL,OACE,gBAACb,EAAD,CAAaC,MAAOA,GAClB,uBACE+B,IAAKC,IAAAA,IAAapB,EAAWkB,GAAOG,MAAO,CAAEC,EAAG,OAAQC,EAAG,UAC3DC,IAAKxB,EAAWkB,GAAOO,WAEzB,4BAAOR,MAIb,CAACjB,IAGH,OACE,gBAACnB,EAAD,KACE,gBAACC,EAAD,CAAM4C,SAAUpC,GACd,gBAACP,EAAD,CACE4C,MAAOtC,EACPuC,SAAUrC,EACVsC,UAAWrB,EACXsB,GAAG,YACHtC,YAAaA,EACbuC,SAAU5B,EACV6B,6BAA2B,GAE3B,gBAAC,IAAD,CACEC,kBAAgB,EAChBC,QAAQ,IACRnC,MAAMC,MAAAA,OAAA,EAAAA,EAAYmC,KAAI,SAACC,GAAD,MAAQ,CAAEN,GAAIM,EAAEN,GAAIO,QAASD,EAAEX,eAAgB,GACrEX,iBAAkBA,KAGtB,gBAAC7B,EAAD,KACE,gBAACC,EAAD,iB,qECtFGoD,GAAW,cAAH,oBAAG,CAAH,0DAMRC,GAAU,kBAAH,oBAAG,CAAH,qEAKPC,GAAe,cAAH,oBAAG,CAAH,+Z,WCXZC,GAAc,cAAH,mBAAG,CAAH,wY,kFCUlBC,EAAmB,SAAC,GAAa,IAAX3C,EAAW,EAAXA,KACpB4C,EAAc,WAAY5C,EAAOA,EAAK6C,OAAS7C,EAAK8C,KAClDpD,GAAcC,EAAAA,EAAAA,MAAdD,UAEFqD,GAASC,EAAAA,EAAAA,UACb,kBACEhD,EAAKiD,QAAQC,WAAW,cAAgBlD,EAAKiD,QAAQC,WAAW,YAC9D,uBAAK9B,IAAG,UAAKvB,EAAAA,EAAL,YAAgBG,EAAKiD,SAAWE,MAAO,CAAEC,UAAW,QAE5DC,EAAAA,EAAAA,GAAe,CACbC,MAAOtD,EAAKiD,QACZM,QAAS,0BACTC,UAHa,SAGHC,EAAOtC,GACf,IAAMuC,EAAuBD,EAAMA,MAAM,uBACzC,OAAIC,EAEA,gBAAC,KAAD,CAAM9C,IAAK6C,EAAQtC,EAAOwC,GAAE,qBAAgBjE,EAAhB,eAAgCgE,EAAI,KAAhE,IACIA,EAAI,IAIL,sBAAI9C,IAAKO,SAIxB,CAACzB,EAAWM,EAAKiD,UAGnB,OACE,gBAACP,EAAD,KACE,uBAAKkB,UAAU,YACb,uBAAKxC,IAAKC,IAAAA,IAAauB,EAAKtB,MAAO,CAAEC,EAAG,OAAQC,EAAG,UAAYC,IAAKmB,EAAKlB,YAE3E,uBAAKkC,UAAU,aACb,uBAAKA,UAAU,aACb,yBAAIhB,EAAKlB,UACT,4BAAOmC,GAAAA,CAAM7D,EAAK8D,WAAWC,OAAO,aAEtC,yBAAIhB,MAMZ,GAAeiB,EAAAA,EAAAA,MAAKrB,G,qHC3CpB,IAkCA,EAlC6B,SAAC,GAAgE,IAA9DsB,EAA8D,EAA9DA,aAAcC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACxEC,GAAW5D,EAAAA,EAAAA,cACf,SAAC6D,GAE0B,IAArBA,EAAOC,WAAoBN,GAAkBC,GAC/CE,GAAQ,SAACI,GAAD,OAAUA,EAAO,KAAGC,MAAK,WAAM,QACrC,UAAAT,EAAa1D,eAAb,SAAsBiE,WAAU,UAAAP,EAAa1D,eAAb,eAAsBoE,mBAAoBJ,EAAOK,mBAIvF,CAACX,IAGH,OACE,gBAAC1B,EAAD,KACE,gBAAC,KAAD,CAAYsC,UAAQ,EAACC,IAAKb,EAAcc,cAAeT,GACpDU,OAAOC,QAAQb,GAAUhC,KAAI,YAAmB,I,IAAA,G,EAAA,E,4CAAA,I,gxBAAjB8C,EAAiB,KAAXC,EAAW,KAE/C,OACE,gBAAC3C,EAAD,CAASoB,UAAS,kBAAasB,GAAQtE,IAAKsE,GAC1C,gBAACzC,EAAD,KACE,8BAASyC,IAEVC,EAAM/C,KAAI,SAAC9C,GAAD,OACT,gBAAC,EAAD,CAAMsB,IAAKtB,EAAKyC,GAAI/B,KAAMV,e,6EClC3B,SAAS8F,EAAmCC,GACzD,IAAMC,EAAmC,GASzC,OARAD,EAASE,SAAQ,SAACjG,GAChB,IAAMkG,EAAY3B,GAAAA,CAAMvE,EAAKwE,WAAWC,OAAO,cAC3C0B,MAAMC,QAAQJ,EAASE,IACzBF,EAASE,GAAWG,KAAKrG,GAEzBgG,EAASE,GAAa,CAAClG,MAGpBgG","sources":["webpack://sleact-ts-front/./components/ChatBox/styles.tsx","webpack://sleact-ts-front/./components/ChatBox/index.tsx","webpack://sleact-ts-front/./components/ChatList/styles.tsx","webpack://sleact-ts-front/./components/Chat/styles.tsx","webpack://sleact-ts-front/./components/Chat/index.tsx","webpack://sleact-ts-front/./components/ChatList/index.tsx","webpack://sleact-ts-front/./utils/makeSections.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n  & strong {\n    background: skyblue;\n  }\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n  & img {\n    margin-right: 5px;\n  }\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import React, { useCallback, useEffect, useRef, VFC } from 'react';\nimport { ChatArea, EachMention, Form, MentionsTextarea, SendButton, Toolbox } from './styles';\nimport autosize from 'autosize';\nimport useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport { useParams } from 'react-router';\nimport { Mention, SuggestionDataItem } from 'react-mentions';\nimport gravatar from 'gravatar';\nimport { backUrl } from '../../config';\n\ninterface Props {\n  chat: string;\n  onSubmitForm: (e: any) => void;\n  onChangeChat: (e: any) => void;\n  placeholder?: string;\n}\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder }) => {\n  // 공통적으로 쓰이는 component들은 같이 사용해줘야 하기 때문에 onSubmitForm같은거는 props로 전달\n  const { workspace } = useParams<{ workspace: string }>();\n  const { data: userData, error, mutate } = useSWR<IUser | false>(`${backUrl}/api/users`, fetcher);\n  const { data: memberData } = useSWR<IUser[]>(\n    userData ? `${backUrl}/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n\n  const onKeydownChat = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        if (!e.shiftKey) {\n          e.preventDefault();\n          onSubmitForm(e);\n        }\n      }\n    },\n    [onSubmitForm],\n  );\n\n  const renderSuggestion = useCallback(\n    (\n      suggestion: SuggestionDataItem,\n      search: string,\n      highlightedDisplay: React.ReactNode,\n      index: number,\n      focus: boolean,\n    ): React.ReactNode => {\n      if (!memberData) return;\n      return (\n        <EachMention focus={focus}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          value={chat}\n          onChange={onChangeChat}\n          onKeyDown={onKeydownChat}\n          id=\"edit-chat\"\n          placeholder={placeholder}\n          inputRef={textareaRef}\n          allowSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          />\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton>보내기</SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n};\n\nexport default ChatBox;\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n  &:hover {\n    background: #eee;\n  }\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n  & .chat-text {\n    display: flex;\n    flex-wrap: wrap;\n    flex: 1;\n    & p {\n      flex: 0 0 100%;\n      margin: 0;\n    }\n  }\n  & .chat-user {\n    display: flex;\n    flex: 0 0 100%;\n    align-items: center;\n    & > b {\n      margin-right: 5px;\n    }\n    & > span {\n      font-size: 12px;\n    }\n  }\n  & a {\n    text-decoration: none;\n    color: deepskyblue;\n  }\n`;\n","import { IDM, IChat, IUser } from '@typings/db';\nimport React, { VFC, useMemo, memo } from 'react';\nimport { ChatWrapper } from './styles';\nimport gravatar from 'gravatar';\nimport dayjs from 'dayjs';\nimport regexifyString from 'regexify-string';\nimport { Link, useParams } from 'react-router-dom';\nimport { backUrl } from '../../config';\n\ninterface Props {\n  data: IDM | IChat;\n}\nconst Chat: VFC<Props> = ({ data }) => {\n  const user: IUser = 'Sender' in data ? data.Sender : data.User;\n  const { workspace } = useParams<{ workspace: string }>();\n\n  const result = useMemo<(string | JSX.Element)[] | JSX.Element>(\n    () =>\n      data.content.startsWith('uploads\\\\') || data.content.startsWith('uploads/') ? (\n        <img src={`${backUrl}/${data.content}`} style={{ maxHeight: 200 }} />\n      ) : (\n        regexifyString({\n          input: data.content,\n          pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\n          decorator(match, index) {\n            const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\n            if (arr) {\n              return (\n                <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                  @{arr[1]}\n                </Link>\n              );\n            }\n            return <br key={index} />;\n          },\n        })\n      ),\n    [workspace, data.content],\n  );\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span>{dayjs(data.createdAt).format(':h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n};\n\nexport default memo(Chat);\n","import { ChatZone, Section, StickyHeader } from './styles';\nimport React, { RefObject, useCallback, useRef, VFC } from 'react';\nimport { IDM, IChat } from '@typings/db';\nimport Chat from '@components/Chat';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\n\ninterface Props {\n  chatData: { [key: string]: (IDM | IChat)[] };\n  scrollbarRef: RefObject<Scrollbars>;\n  isReachingEnd?: boolean;\n  isEmpty: boolean;\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n}\nconst ChatList: VFC<Props> = ({ scrollbarRef, isReachingEnd, isEmpty, chatData, setSize }) => {\n  const onScroll = useCallback(\n    (values) => {\n      // 맨 위에 도달 하였고,           마지막 페이지가 아니고  데이터가 끝이 아닐때\n      if (values.scrollTop === 0 && !isReachingEnd && !isEmpty) {\n        setSize((size) => size + 1).then(() => {\n          scrollbarRef.current?.scrollTop(scrollbarRef.current?.getScrollHeight() - values.scrollHeight);\n        });\n      }\n    },\n    [scrollbarRef],\n  );\n\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollbarRef} onScrollFrame={onScroll}>\n        {Object.entries(chatData).map(([date, chats]) => {\n          //객체의 반복문은 Objects.entries로 한다\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                <button>{date}</button>\n              </StickyHeader>\n              {chats.map((chat) => (\n                <Chat key={chat.id} data={chat} />\n              ))}\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n};\n\nexport default ChatList;\n","import { IChat, IDM } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection<T extends IDM | IChat>(chatList: T[]) {\n  const sections: { [key: string]: T[] } = {};\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n  return sections;\n}\n"],"names":["ChatArea","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","useSWR","backUrl","fetcher","userData","data","memberData","error","mutate","textareaRef","useRef","useEffect","current","autosize","onKeydownChat","useCallback","e","key","preventDefault","shiftKey","renderSuggestion","suggestion","search","highlightedDisplay","index","src","gravatar","email","s","d","alt","nickname","onSubmit","value","onChange","onKeyDown","id","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","map","v","display","ChatZone","Section","StickyHeader","ChatWrapper","Chat","user","Sender","User","result","useMemo","content","startsWith","style","maxHeight","regexifyString","input","pattern","decorator","match","arr","to","className","dayjs","createdAt","format","memo","scrollbarRef","isReachingEnd","isEmpty","chatData","setSize","onScroll","values","scrollTop","size","then","getScrollHeight","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","date","chats","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}